Source Code For Lambda function
import { DynamoDBClient } from "@aws-sdk/client-dynamodb";
import { DynamoDBDocumentClient } from "@aws-sdk/lib-dynamodb";
import { ScanCommand, PutCommand } from "@aws-sdk/lib-dynamodb";
 
const client = new DynamoDBClient({ region: "us-east-1" });
const dynamoDB = DynamoDBDocumentClient.from(client);
const TableName = "Products”;
 
 
export const addProduct = async (event: any)=> {
  const body = JSON.parse(event.body || "{}");
  const { name, price } = body;
 
  if (!price || !name) {
    return {
      statusCode: 400,
      headers: { "Access-Control-Allow-Origin": "*" },
      body: JSON.stringify({ message: “Price and name required" })
    };
  }
 
  await dynamoDB.send (new PutCommand({ TableName: TableName, Item: { name, price } }));
  return {
    statusCode: 201,
    headers: { "Access-Control-Allow-Origin": "*" },
    body: JSON.stringify({ message: “Product added" })
  };
};
 
export const getStudents = async ()=> {
  const result = await dynamoDB.send(new ScanCommand({ TableName }));
  return { statusCode: 200, headers: { "Access-Control-Allow-Origin": "*" }, body: JSON.stringify(result.Items) };
};
 
==========================

Lambda function code for: Get Product By Id
import { DynamoDBClient } from "@aws-sdk/client-dynamodb";
import { DynamoDBDocumentClient } from "@aws-sdk/lib-dynamodb";
import { GetCommand } from "@aws-sdk/lib-dynamodb";
 
const client = new DynamoDBClient({ region: "us-east-1" });
const dynamoDB = DynamoDBDocumentClient.from(client);
const TableName = "Products";
 
export const handler = async (event) => {
  const { id } = event.pathParameters || {};
 
  if (!id) {
    return {
      statusCode: 400,
      headers: { "Access-Control-Allow-Origin": "*" },
      body: JSON.stringify({ message: "Product ID is required" }),
    };
  }
 
  const result = await dynamoDB.send(new GetCommand({
    TableName,
    Key: { id }
  }));
 
  if (!result.Item) {
    return {
      statusCode: 404,
      headers: { "Access-Control-Allow-Origin": "*" },
      body: JSON.stringify({ message: "Product not found" }),
    };
  }
 
  return {
    statusCode: 200,
    headers: { "Access-Control-Allow-Origin": "*" },
    body: JSON.stringify(result.Item),
  };
}
 
////////////
import { DynamoDBClient } from "@aws-sdk/client-dynamodb";
import { DynamoDBDocumentClient } from "@aws-sdk/lib-dynamodb";
import { ScanCommand, PutCommand } from "@aws-sdk/lib-dynamodb";
 
const client = new DynamoDBClient({ region: "us-east-1" });
const dynamoDB = DynamoDBDocumentClient.from(client);
const TableName = "User";
 
 
export const getUserById = async (id)=> {
  const result = await dynamoDB.send(new ScanCommand({ TableName, FilterExpression: "userId = :id", ExpressionAttributeValues: { ":id": id } }));
  return result.Items[0];
};
 
export const handler = async (event) => {
  try {
    const id = event.queryStringParameters?.id || event.id;
    
    if (!id) {
      return {
        statusCode: 400,
        body: JSON.stringify({ error: "Missing user ID" }),
        headers: {
          "Content-Type": "application/json"
        }
      };
    }
 
    const user = await getUserById(id);
    
    if (!user) {
      return {
        statusCode: 404,
        body: JSON.stringify({ error: "User not found" }),
        headers: {
          "Content-Type": "application/json"
        }
      };
    }
 
    return {
      statusCode: 200,
      body: JSON.stringify(user),
      headers: {
        "Content-Type": "application/json"
      }
    };
  } catch (error) {
    return {
      statusCode: 500,
      body: JSON.stringify({ error: "Internal server error" }),
      headers: {
        "Content-Type": "application/json"
      }
    };
  }
};
 
 
// API: .... /user?id=u004
 